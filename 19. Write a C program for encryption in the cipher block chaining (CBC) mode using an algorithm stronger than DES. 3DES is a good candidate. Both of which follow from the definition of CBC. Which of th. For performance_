#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/err.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

void handleErrors(void) {
    ERR_print_errors_fp(stderr);
    abort();
}

int encrypt(unsigned char *plaintext, int plaintext_len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
    EVP_CIPHER_CTX *ctx;
    int len;
    int ciphertext_len;

    if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

    if(1 != EVP_EncryptInit_ex(ctx, EVP_des_ede3_cbc(), NULL, key, iv)) handleErrors();

    if(1 != EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len)) handleErrors();
    ciphertext_len = len;

    if(1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) handleErrors();
    ciphertext_len += len;

    EVP_CIPHER_CTX_free(ctx);

    return ciphertext_len;
}

int main(void) {
    // Ensure you use a 24-byte key for 3DES
    unsigned char *key = (unsigned char *)"0123456789abcdef01234567"; // 24 bytes key for 3DES
    unsigned char iv[EVP_MAX_IV_LENGTH];

    if(!RAND_bytes(iv, EVP_MAX_IV_LENGTH)) {
        fprintf(stderr, "Could not generate random bytes.\n");
        return 1;
    }

    char *plaintext = "The quick brown fox jumps over the lazy dog";
    unsigned char ciphertext[128];

    int ciphertext_len = encrypt((unsigned char *)plaintext, strlen(plaintext), key, iv, ciphertext);

    printf("Ciphertext is:\n");
    for(int i = 0; i < ciphertext_len; i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");

    printf("Initialization Vector (IV) is:\n");
    for(int i = 0; i < EVP_MAX_IV_LENGTH; i++) {
        printf("%02x", iv[i]);
    }
    printf("\n");

    return 0;
}
